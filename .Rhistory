stringsAsFactors=FALSE)
pop <- read.csv("data/regions/POP.csv", sep = "\t", encoding = "UTF-8", dec = ",",
stringsAsFactors=FALSE)
subreg <- merge (x = subreg, y = pib,
by.x = "ID_ADMIN_1",
by.y = "ID_ADMIN",
all.x = TRUE)
subreg <- merge (x = subreg, y = pop,
by.x = "ID_ADMIN_1",
by.y = "ID_ADMIN",
all.x = TRUE)
# -- Source : data.world (https://data.world/carlvlewis/border-fence-boundaries-u-s-mexico)
# Mur de séparation
fences <- geojson_sf("data/data.world/border-fence.geojson")
prj <- "+proj=ortho +lat_0=-35 +lon_0=-104 +x_0=0 +y_0=0 +ellps=WGS84 +units=m +no_defs"
subregions <- st_transform(subreg,crs = prj)
countries <- st_transform(countries,crs = prj)
fences <- st_transform(fences,crs = prj)
rivers <- st_transform(rivers,crs = prj)
coastline <- st_transform(coastline,crs = prj)
ocean <- st_transform(ocean,crs = prj)
subregions <- st_transform(subregions,crs = prj)
# Définition de la bbox
bb <- c(-1668000, 4798000, 934863, 5900000)
d <- 100000
bbox <- st_as_sfc(st_bbox(c(xmin = bb[1]-2*d , xmax = bb[3]+2*d, ymax = bb[2]-3.5*d, ymin = bb[4]+3.5*d), crs = prj))
# Intersection
subregions <- st_intersection(x = subregions, y = bbox)
rivers <- st_intersection(x = rivers, y = bbox)
coastline <- st_intersection(x = coastline, y = bbox)
library(cartography)
lay <- function(title = ""){
authors <- "N. Lambert & R. Ysebaert, 2019\nData source: IOM, Didelon, Vandermotten, Dessouroux, (c) OpenStreetMap contributors, 2019"
par(mar = c(0,0,1.2,0))
#plot(st_geometry(bbox), col = "#b8d5e3", border = NA)
#plot(st_geometry(bboxtop), col =NA, border = NA)
plot(st_geometry(bbox), col= "#b8d5e3", border = NA, xlim = bb[c(1,3)], ylim = bb[c(2,4)])
plot(st_geometry(subregions) + c(-10000, -10000), col ="#827e6c50", border = NA, add = T)
plot(st_geometry(subregions), col= "#ede6bb", border = "white", cex = 0.5, add=T)
plot(st_geometry(coastline), col= "#6d9cb3",lwd = 1 ,add= T)
plot(st_geometry(rivers), col= "#6d9cb3",lwd = 1 ,add= T)
plot(st_geometry(fences), col= "#3d3c3c",lwd = 3 ,add= T)
layoutLayer(title = title,
author =  authors,
scale = 300, south = TRUE, frame = TRUE,
col = "#6d9cb3", coltitle = "white")
}
lay("Template cartographique")
lay("Localisation des postes frontaliers")
library(osmdata)
# Convertir la bounding box en WGS 84
bb <- st_transform(bbox, 4326)
# Définir la requête (clé/valeur OSM sur bounding box)
opqbox <- opq(bbox = bb , timeout = 5000)
opquery <- add_osm_feature(opq = opqbox, key = "barrier", value = "border_control")
feat <- osmdata_sf(opquery)
# Extraire les points qui répondent à la requête
featpt <- st_transform(feat$osm_points, prj)
featpt <- featpt[featpt[["barrier"]] %in% "border_control", ]
# Extraire les polygones qui répondent à la requête
featpo <- st_transform(feat$osm_polygons, prj)
st_geometry(featpo) <- st_centroid(st_geometry(featpo))
featpo$osm_id <- row.names(featpo)
# Combiner points et polygones, les intersecter avec la bounding box
featpt <- rbind(featpt[, c("osm_id", "geometry")], featpo[, c("osm_id", "geometry")])
poi_osm <- st_intersection(x = featpt, st_geometry(subregions))
lay("Localisation des postes frontaliers")
library(cartography)
lay <- function(title = ""){
authors <- "N. Lambert & R. Ysebaert, 2019\nData source: IOM, Didelon, Vandermotten, Dessouroux, (c) OpenStreetMap contributors, 2019"
par(mar = c(0,0,1.2,0))
#plot(st_geometry(bbox), col = "#b8d5e3", border = NA)
#plot(st_geometry(bboxtop), col =NA, border = NA)
plot(st_geometry(bbox), col= "#b8d5e3", border = NA, xlim = bb[c(1,3)], ylim = bb[c(2,4)])
plot(st_geometry(subregions) + c(-10000, -10000), col ="#827e6c50", border = NA, add = T)
plot(st_geometry(subregions), col= "#ede6bb", border = "white", cex = 0.5, add=T)
plot(st_geometry(coastline), col= "#6d9cb3",lwd = 1 ,add= T)
plot(st_geometry(rivers), col= "#6d9cb3",lwd = 1 ,add= T)
plot(st_geometry(fences), col= "#3d3c3c",lwd = 3 ,add= T)
layoutLayer(title = title,
author =  authors,
scale = 300, south = TRUE, frame = TRUE,
col = "#6d9cb3", coltitle = "white")
}
lay("Template cartographique")
library(sf)
library("geojsonsf")
library("rnaturalearth")
# -- Source : Natural Earth --
# Pays
countries <- ne_countries(scale = 50, type = "countries", continent = NULL,
country = NULL, geounit = NULL, sovereignty = NULL,
returnclass = "sf")
countries <- countries[countries$adm0_a3 %in% c("MEX","USA"),]
# Rivières
rivers <- ne_download(scale = 50, type = "rivers_lake_centerlines", category = "physical", returnclass = "sf")
# Trait de côte
coastline <- ne_download(scale = 50, type = "coastline", category = "physical", returnclass = "sf")
# Océans
ocean <- ne_download(scale = 50, type = "ocean", category = "physical", returnclass = "sf")
# -- Source : Cartographier le monde à l'échelle infranationale (CIST) --
subreg <- st_read(dsn = "data/regions/mex_us_admin_1.shp",options = "ENCODING=UTF-8",
stringsAsFactors = FALSE)
subreg <- st_transform (subreg,
crs = "+proj=aea +lat_1=14.5 +lat_2=32.5 +lat_0=24 +lon_0=-105 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs")
#  DATA -- PIB & demo (level 1-2)
pib <- read.csv("data/regions/PIB.csv", sep = "\t",encoding = "UTF-8", dec = ",",
stringsAsFactors=FALSE)
pop <- read.csv("data/regions/POP.csv", sep = "\t", encoding = "UTF-8", dec = ",",
stringsAsFactors=FALSE)
subreg <- merge (x = subreg, y = pib,
by.x = "ID_ADMIN_1",
by.y = "ID_ADMIN",
all.x = TRUE)
subreg <- merge (x = subreg, y = pop,
by.x = "ID_ADMIN_1",
by.y = "ID_ADMIN",
all.x = TRUE)
# -- Source : data.world (https://data.world/carlvlewis/border-fence-boundaries-u-s-mexico)
# Mur de séparation
fences <- geojson_sf("data/data.world/border-fence.geojson")
prj <- "+proj=ortho +lat_0=-35 +lon_0=-104 +x_0=0 +y_0=0 +ellps=WGS84 +units=m +no_defs"
subregions <- st_transform(subreg,crs = prj)
countries <- st_transform(countries,crs = prj)
fences <- st_transform(fences,crs = prj)
rivers <- st_transform(rivers,crs = prj)
coastline <- st_transform(coastline,crs = prj)
ocean <- st_transform(ocean,crs = prj)
subregions <- st_transform(subregions,crs = prj)
# Définition de la bbox
bb <- c(-1668000, 4798000, 934863, 5900000)
d <- 100000
bbox <- st_as_sfc(st_bbox(c(xmin = bb[1]-2*d , xmax = bb[3]+2*d, ymax = bb[2]-3.5*d, ymin = bb[4]+3.5*d), crs = prj))
# Intersection
subregions <- st_intersection(x = subregions, y = bbox)
rivers <- st_intersection(x = rivers, y = bbox)
coastline <- st_intersection(x = coastline, y = bbox)
library(cartography)
lay <- function(title = ""){
authors <- "N. Lambert & R. Ysebaert, 2019\nData source: IOM, Didelon, Vandermotten, Dessouroux, (c) OpenStreetMap contributors, 2019"
par(mar = c(0,0,1.2,0))
#plot(st_geometry(bbox), col = "#b8d5e3", border = NA)
#plot(st_geometry(bboxtop), col =NA, border = NA)
plot(st_geometry(bbox), col= "#b8d5e3", border = NA, xlim = bb[c(1,3)], ylim = bb[c(2,4)])
plot(st_geometry(subregions) + c(-10000, -10000), col ="#827e6c50", border = NA, add = T)
plot(st_geometry(subregions), col= "#ede6bb", border = "white", cex = 0.5, add=T)
plot(st_geometry(coastline), col= "#6d9cb3",lwd = 1 ,add= T)
plot(st_geometry(rivers), col= "#6d9cb3",lwd = 1 ,add= T)
plot(st_geometry(fences), col= "#3d3c3c",lwd = 3 ,add= T)
layoutLayer(title = title,
author =  authors,
scale = 300, south = TRUE, frame = TRUE,
col = "#6d9cb3", coltitle = "white")
}
lay("Template cartographique")
library(osmdata)
# Convertir la bounding box en WGS 84
bb <- st_transform(bbox, 4326)
# Définir la requête (clé/valeur OSM sur bounding box)
opqbox <- opq(bbox = bb , timeout = 5000)
opquery <- add_osm_feature(opq = opqbox, key = "barrier", value = "border_control")
feat <- osmdata_sf(opquery)
# Extraire les points qui répondent à la requête
featpt <- st_transform(feat$osm_points, prj)
featpt <- featpt[featpt[["barrier"]] %in% "border_control", ]
# Extraire les polygones qui répondent à la requête
featpo <- st_transform(feat$osm_polygons, prj)
st_geometry(featpo) <- st_centroid(st_geometry(featpo))
featpo$osm_id <- row.names(featpo)
# Combiner points et polygones, les intersecter avec la bounding box
featpt <- rbind(featpt[, c("osm_id", "geometry")], featpo[, c("osm_id", "geometry")])
lay("Localisation des postes frontaliers")
library(sf)
library("geojsonsf")
library("rnaturalearth")
# -- Source : Natural Earth --
# Pays
countries <- ne_countries(scale = 50, type = "countries", continent = NULL,
country = NULL, geounit = NULL, sovereignty = NULL,
returnclass = "sf")
countries <- countries[countries$adm0_a3 %in% c("MEX","USA"),]
# Rivières
rivers <- ne_download(scale = 50, type = "rivers_lake_centerlines", category = "physical", returnclass = "sf")
# Trait de côte
coastline <- ne_download(scale = 50, type = "coastline", category = "physical", returnclass = "sf")
# Océans
ocean <- ne_download(scale = 50, type = "ocean", category = "physical", returnclass = "sf")
# -- Source : Cartographier le monde à l'échelle infranationale (CIST) --
subreg <- st_read(dsn = "data/regions/mex_us_admin_1.shp",options = "ENCODING=UTF-8",
stringsAsFactors = FALSE)
subreg <- st_transform (subreg,
crs = "+proj=aea +lat_1=14.5 +lat_2=32.5 +lat_0=24 +lon_0=-105 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs")
#  DATA -- PIB & demo (level 1-2)
pib <- read.csv("data/regions/PIB.csv", sep = "\t",encoding = "UTF-8", dec = ",",
stringsAsFactors=FALSE)
pop <- read.csv("data/regions/POP.csv", sep = "\t", encoding = "UTF-8", dec = ",",
stringsAsFactors=FALSE)
subreg <- merge (x = subreg, y = pib,
by.x = "ID_ADMIN_1",
by.y = "ID_ADMIN",
all.x = TRUE)
subreg <- merge (x = subreg, y = pop,
by.x = "ID_ADMIN_1",
by.y = "ID_ADMIN",
all.x = TRUE)
# -- Source : data.world (https://data.world/carlvlewis/border-fence-boundaries-u-s-mexico)
# Mur de séparation
fences <- geojson_sf("data/data.world/border-fence.geojson")
prj <- "+proj=ortho +lat_0=-35 +lon_0=-104 +x_0=0 +y_0=0 +ellps=WGS84 +units=m +no_defs"
subregions <- st_transform(subreg,crs = prj)
countries <- st_transform(countries,crs = prj)
fences <- st_transform(fences,crs = prj)
rivers <- st_transform(rivers,crs = prj)
coastline <- st_transform(coastline,crs = prj)
ocean <- st_transform(ocean,crs = prj)
subregions <- st_transform(subregions,crs = prj)
# Définition de la bbox
bb <- c(-1668000, 4798000, 934863, 5900000)
d <- 100000
bbox <- st_as_sfc(st_bbox(c(xmin = bb[1]-2*d , xmax = bb[3]+2*d, ymax = bb[2]-3.5*d, ymin = bb[4]+3.5*d), crs = prj))
# Intersection
subregions <- st_intersection(x = subregions, y = bbox)
rivers <- st_intersection(x = rivers, y = bbox)
coastline <- st_intersection(x = coastline, y = bbox)
library(cartography)
lay <- function(title = ""){
authors <- "N. Lambert & R. Ysebaert, 2019\nData source: IOM, Didelon, Vandermotten, Dessouroux, (c) OpenStreetMap contributors, 2019"
par(mar = c(0,0,1.2,0))
#plot(st_geometry(bbox), col = "#b8d5e3", border = NA)
#plot(st_geometry(bboxtop), col =NA, border = NA)
plot(st_geometry(bbox), col= "#b8d5e3", border = NA, xlim = bb[c(1,3)], ylim = bb[c(2,4)])
plot(st_geometry(subregions) + c(-10000, -10000), col ="#827e6c50", border = NA, add = T)
plot(st_geometry(subregions), col= "#ede6bb", border = "white", cex = 0.5, add=T)
plot(st_geometry(coastline), col= "#6d9cb3",lwd = 1 ,add= T)
plot(st_geometry(rivers), col= "#6d9cb3",lwd = 1 ,add= T)
plot(st_geometry(fences), col= "#3d3c3c",lwd = 3 ,add= T)
layoutLayer(title = title,
author =  authors,
scale = 300, south = TRUE, frame = TRUE,
col = "#6d9cb3", coltitle = "white")
}
lay("Template cartographique")
# Convertir la bounding box en WGS 84
bb <- st_transform(bbox, 4326)
lay("Localisation des postes frontaliers")
library(sf)
library("geojsonsf")
library("rnaturalearth")
# -- Source : Natural Earth --
# Pays
countries <- ne_countries(scale = 50, type = "countries", continent = NULL,
country = NULL, geounit = NULL, sovereignty = NULL,
returnclass = "sf")
countries <- countries[countries$adm0_a3 %in% c("MEX","USA"),]
# Rivières
rivers <- ne_download(scale = 50, type = "rivers_lake_centerlines", category = "physical", returnclass = "sf")
# Trait de côte
coastline <- ne_download(scale = 50, type = "coastline", category = "physical", returnclass = "sf")
# Océans
ocean <- ne_download(scale = 50, type = "ocean", category = "physical", returnclass = "sf")
# -- Source : Cartographier le monde à l'échelle infranationale (CIST) --
subreg <- st_read(dsn = "data/regions/mex_us_admin_1.shp",options = "ENCODING=UTF-8",
stringsAsFactors = FALSE)
subreg <- st_transform (subreg,
crs = "+proj=aea +lat_1=14.5 +lat_2=32.5 +lat_0=24 +lon_0=-105 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs")
#  DATA -- PIB & demo (level 1-2)
pib <- read.csv("data/regions/PIB.csv", sep = "\t",encoding = "UTF-8", dec = ",",
stringsAsFactors=FALSE)
pop <- read.csv("data/regions/POP.csv", sep = "\t", encoding = "UTF-8", dec = ",",
stringsAsFactors=FALSE)
subreg <- merge (x = subreg, y = pib,
by.x = "ID_ADMIN_1",
by.y = "ID_ADMIN",
all.x = TRUE)
subreg <- merge (x = subreg, y = pop,
by.x = "ID_ADMIN_1",
by.y = "ID_ADMIN",
all.x = TRUE)
# -- Source : data.world (https://data.world/carlvlewis/border-fence-boundaries-u-s-mexico)
# Mur de séparation
fences <- geojson_sf("data/data.world/border-fence.geojson")
prj <- "+proj=ortho +lat_0=-35 +lon_0=-104 +x_0=0 +y_0=0 +ellps=WGS84 +units=m +no_defs"
subregions <- st_transform(subreg,crs = prj)
countries <- st_transform(countries,crs = prj)
fences <- st_transform(fences,crs = prj)
rivers <- st_transform(rivers,crs = prj)
coastline <- st_transform(coastline,crs = prj)
ocean <- st_transform(ocean,crs = prj)
subregions <- st_transform(subregions,crs = prj)
# Définition de la bbox
bb <- c(-1668000, 4798000, 934863, 5900000)
d <- 100000
bbox <- st_as_sfc(st_bbox(c(xmin = bb[1]-2*d , xmax = bb[3]+2*d, ymax = bb[2]-3.5*d, ymin = bb[4]+3.5*d), crs = prj))
# Intersection
subregions <- st_intersection(x = subregions, y = bbox)
rivers <- st_intersection(x = rivers, y = bbox)
coastline <- st_intersection(x = coastline, y = bbox)
library(cartography)
lay <- function(title = ""){
authors <- "N. Lambert & R. Ysebaert, 2019\nData source: IOM, Didelon, Vandermotten, Dessouroux, (c) OpenStreetMap contributors, 2019"
par(mar = c(0,0,1.2,0))
#plot(st_geometry(bbox), col = "#b8d5e3", border = NA)
#plot(st_geometry(bboxtop), col =NA, border = NA)
plot(st_geometry(bbox), col= "#b8d5e3", border = NA, xlim = bb[c(1,3)], ylim = bb[c(2,4)])
plot(st_geometry(subregions) + c(-10000, -10000), col ="#827e6c50", border = NA, add = T)
plot(st_geometry(subregions), col= "#ede6bb", border = "white", cex = 0.5, add=T)
plot(st_geometry(coastline), col= "#6d9cb3",lwd = 1 ,add= T)
plot(st_geometry(rivers), col= "#6d9cb3",lwd = 1 ,add= T)
plot(st_geometry(fences), col= "#3d3c3c",lwd = 3 ,add= T)
layoutLayer(title = title,
author =  authors,
scale = 300, south = TRUE, frame = TRUE,
col = "#6d9cb3", coltitle = "white")
}
lay("Template cartographique")
# Convertir la bounding box en WGS 84
toto <- st_transform(bbox, 4326)
lay("Localisation des postes frontaliers")
# Convertir la bounding box en WGS 84
tmp <- st_transform(bbox, 4326)
# Définir la requête (clé/valeur OSM sur bounding box)
opqbox <- opq(bbox = tmp , timeout = 5000)
opquery <- add_osm_feature(opq = opqbox, key = "barrier", value = "border_control")
feat <- osmdata_sf(opquery)
# Extraire les points qui répondent à la requête
featpt <- st_transform(feat$osm_points, prj)
featpt <- featpt[featpt[["barrier"]] %in% "border_control", ]
# Extraire les polygones qui répondent à la requête
featpo <- st_transform(feat$osm_polygons, prj)
st_geometry(featpo) <- st_centroid(st_geometry(featpo))
featpo$osm_id <- row.names(featpo)
lay("Localisation des postes frontaliers")
# Combiner points et polygones, les intersecter avec la bounding box
featpt <- rbind(featpt[, c("osm_id", "geometry")], featpo[, c("osm_id", "geometry")])
lay("Localisation des postes frontaliers")
poi_osm <- st_intersection(x = featpt, st_geometry(subregions))
lay("Localisation des postes frontaliers")
plot(st_geometry(featpt), bg = "red", col = NA, pch = 21, cex = 0.8)
lay("Localisation des postes frontaliers")
plot(st_geometry(featpt), bg = "red", col = NA, pch = 21, cex = 0.8, add = T)
subregions
featpt
# Import du fichier brut (OIM)
iom <- read.csv("data/iom/MissingMigrants-Global-2019-10-29T14-11-50.csv", stringsAsFactors = F)
# Gestion des coordonnées
iom <- iom[(iom$Location.Coordinates)!="",]
latlon <- matrix(as.numeric(unlist(strsplit(iom$Location.Coordinates, split = ", "))), ncol = 2, byrow = T)
colnames(latlon) <- c("lat", 'lon')
iom <- cbind(iom, latlon)
# Sélection et renommage des variables, conversion au format numérique des champs
iom <- iom[,c("Web.ID","Reported.Year","Total.Dead.and.Missing","Number.of.Survivors","Region.of.Incident","lat","lon")]
colnames(iom) <- c("id","year","deads","survivors","region","latitude","longitude")
iom$deads <- as.numeric(iom$deads)
iom <- iom[!is.na(iom$deads),]
iom$latitude <- as.numeric(iom$latitude)
iom$longitude <- as.numeric(iom$longitude)
# Conversion en objet sf et reprojection
iom_sf <- st_as_sf(iom, coords = c("longitude", "latitude"), crs = 4326, agr = "constant")
iom_sf <- st_transform(iom_sf,crs = prj)
lay("USA-Mexico border")
plot(st_geometry(iom_sf), pch=20, col= "#eb3850", cex = 0.5, add=T)
lay("USA-Mexico border")
propSymbolsLayer(x = iom_sf, var = "deads",
symbols = "circle", col =  "#eb3850",
legend.pos = "left", border = "black", lwd = 0.5,
legend.title.txt = "Dead\nand missing\nmigrants,\n2014 - 2019",
legend.style = "e")
iom_sf$m_weight <- 1
iom_sf$m_weight[iom_sf$deads > 1] <- 0.5
iom_sf$m_weight[iom_sf$deads >= 25] <- 0
deathsdor <- cartogram_dorling(x = st_jitter(iom_sf),weight = "deads", m_weight = iom_sf$m_weight, k = .4)
lay("USA-Mexico border")
plot(st_geometry(deathsdor), pch=20, col= "#eb3850", border ="#ede6bb", cex = 0.1, add=T)
plot(st_geometry(fences), col= "#3d3c3c", lwd = 3 ,add= T)
all <- iom_sf[,c("id","deads","year","geometry")]
iom_unique <- all[all$deads == 1,]
iom_multi <-  all[all$deads > 1,]
for (i in 1:dim(iom_multi)[1]){
nb <- as.numeric(iom_multi[i,"deads"])[1]
tmp <- iom_multi[i,]
tmp$deads <- 1
for (j in 1:nb){ iom_unique <- rbind(iom_unique,tmp)}
}
deathsdor2 <- cartogram_dorling(x = st_jitter(iom_unique),weight = "deads", k = .004)
lay("USA-Mexico border")
plot(st_geometry(deathsdor2), pch=20, col= "#eb3850", border ="#ede6bb", cex = 0.1, add=T)
plot(st_geometry(fences), col= "#3d3c3c", lwd = 3 ,add= T)
library("sf")
library("rnaturalearth")
library("geojsonsf")
library("cartography")
library("cartogram")
library("leaflet")
library("SpatialPosition")
library("units")
library("OECD")
library("ggplot2")
library("ggthemes")
# -- Source : Natural Earth --
# Pays
countries <- ne_countries(scale = 50, type = "countries", continent = NULL,
country = NULL, geounit = NULL, sovereignty = NULL,
returnclass = "sf")
countries <- countries[countries$adm0_a3 %in% c("MEX","USA"),]
# Rivières
rivers <- ne_download(scale = 50, type = "rivers_lake_centerlines", category = "physical", returnclass = "sf")
# Trait de côte
coastline <- ne_download(scale = 50, type = "coastline", category = "physical", returnclass = "sf")
# Océans
ocean <- ne_download(scale = 50, type = "ocean", category = "physical", returnclass = "sf")
# -- Source : Cartographier le monde à l'échelle infranationale (CIST) --
subregions <- st_read(dsn = "data/regions/mex_us_admin_1.shp",options = "ENCODING=UTF-8",
stringsAsFactors = FALSE)
# -- Source : data.world (https://data.world/carlvlewis/border-fence-boundaries-u-s-mexico)
# Mur de séparation
fences <- geojson_sf("data/data.world/border-fence.geojson")
# choix de la projection
prj <- "+proj=aea +lat_1=14.5 +lat_2=32.5 +lat_0=24 +lon_0=-105 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs"
#prj <- "+proj=ortho +lat_0=-30 +lon_0=-90 +x_0=0 +y_0=0 +ellps=WGS84 +units=m +no_defs"
countries <- st_transform(countries,crs = prj)
fences <- st_transform(fences,crs = prj)
rivers <- st_transform(rivers,crs = prj)
coastline <- st_transform(coastline,crs = prj)
ocean <- st_transform(ocean,crs = prj)
subregions <- st_transform(subregions,crs = prj)
# Choix de l'emprise (un peu de bidouille, pas optimal)
bb <- c(-1342784.0, -739750.5, 793341.2, 1317849.8)
d <- 100000
bbox <- st_as_sfc(st_bbox(c(xmin = bb[1]-2*d , xmax = bb[3]+2*d, ymax = bb[2]-d, ymin = bb[4]+d), crs = prj))
# Intersection du fond régional avec la bbox
subregions <- st_intersection(x = subregions, st_geometry(bbox))
#  DATA -- PIB & demo (level 1-2)
pib <- read.csv("data/regions/PIB.csv", sep = "\t",encoding = "UTF-8", dec = ",",
stringsAsFactors=FALSE)
pop <- read.csv("data/regions/POP.csv", sep = "\t", encoding = "UTF-8", dec = ",",
stringsAsFactors=FALSE)
subregions <- merge (x = subregions, y = pib,
by.x = "ID_ADMIN_1",
by.y = "ID_ADMIN",
all.x = TRUE)
subregions <- merge (x = subregions, y = pop,
by.x = "ID_ADMIN_1",
by.y = "ID_ADMIN",
all.x = TRUE)
lay <- function(title = ""){
authors <- "N. Lambert & R. Ysebaert, 2019\nData source: IOM, Didelon, Vandermotten, Dessouroux, (c) OpenStreetMap contributors, 2019"
par(mar = c(0,0,1.2,0))
plot(st_geometry(ocean), col= "#b8d5e3", border = NA, xlim = bb[c(1,3)], ylim = bb[c(2,4)])
plot(st_geometry(countries) + c(-10000, -10000), col ="#827e6c50", border = NA, add= T)
plot(st_geometry(countries), col= "#ede6bb", border = "white", cex = 0.5, add=T)
plot(st_geometry(coastline), col= "#6d9cb3",lwd = 1 ,add= T)
plot(st_geometry(rivers), col= "#6d9cb3",lwd = 1 ,add= T)
plot(st_geometry(fences), col= "#3d3c3c",lwd = 3 ,add= T)
layoutLayer(title = title,
author =  authors,
scale = 300, south = TRUE, frame = TRUE,
col = "#6d9cb3", coltitle = "white")
}
lay("Template cartographique")
# Options de recherche du package OECD
# as.data.frame(search_dataset("GDP", data = get_datasets()))
# dstruc <- get_data_structure("PDB_LV")
# str(dstruc, max.level = 2)
# Télécharger les données de la table PDB_LV pour USA, Mexique, pays de l'OCDE
df <- get_dataset(dataset = "PDB_LV", filter = list(c("MEX", "USA","OECD"),
"T_GDPPOP",
"CPC"))
# Transformer la date au format numérique
df$obsTime <- as.numeric(df$obsTime)
# Représentation graphique
ggplot(data = df, aes(x = obsTime, y = obsValue, color = LOCATION)) +
geom_line(size = 1) +
labs(x = NULL, y = "Dollars, prix courant", color = NULL,
title =  "Évolution comparée du PIB par habitant (Mexique - USA - OCDE)") +
theme_hc() +
scale_color_manual(values=c("#999999", "#E69F00", "#56B4E9"))
# Options de recherche du package OECD
# as.data.frame(search_dataset("population", data = get_datasets()))
# dstruc <- get_data_structure("POP_PROJ")
# dstruc$VAR_DESC
# dstruc$AGE
df <- as.data.frame(get_dataset(dataset = "POP_PROJ",
filter = list(c("MEX","USA","OECD"),"TT","D1TTR5Y4")))
df$obsTime <- as.numeric(df$obsTime)
# Représentation graphique
ggplot(data = df, aes(x = obsTime, y = obsValue, color = LOCATION)) +
geom_line(size = 1) +
labs(x = NULL, y = "Part de la population totale", color = NULL,
title =  "Évolution de la part des moins de 20 ans (Mexique - USA - OCDE)") +
theme_hc() +
scale_color_manual(values=c("#999999", "#E69F00", "#56B4E9"))
par(mar = c(0,0,1.2,0))
lay("Une barrière démographique...")
choroLayer(x = subregions, var = "POP65_POP15",
breaks = c(min(subregions$POP65_POP15, na.rm = T),
20,25,35,50,65, max(subregions$POP65_POP15, na.rm = T)),
col = carto.pal(pal1 = "green.pal", n1 = 3, pal2 = "red.pal", n2 = 3),
legend.pos = "topleft",
legend.horiz = TRUE, legend.title.cex = 0.7, legend.values.cex = 0.5,
legend.title.txt = "Rapport entre la population âgée de plus de 65 ans\net la population âgée de moins de 15 ans\nen 2015 (%)",
border = NA, add = TRUE)
plot(st_geometry(coastline), col= "#6d9cb3",lwd = 1 ,add= T)
# Get borders
subregions.borders <- getBorders(subregions)
discLayer(x = subregions.borders, df = subregions,
var = "POP65_POP15", col="black", nclass=3,
method="equal", threshold = 0.3, sizemin = 0.5,
sizemax = 10, type = "abs",legend.values.rnd = 0,
legend.title.txt = "Discontinuités sur l'indice de veillissement 2015\n(différences absolues)",
legend.pos = "left", legend.title.cex = 0.7, legend.values.cex = 0.5,
add = TRUE)
unlink('index_cache', recursive = TRUE)
