<<<<<<< HEAD
<h3>year: </b>",iom$year,"</h3>
<b>location: </b>",iom$location,"<br/>
<b>Source: </b>",iom$source,"<br/>"
)
m <- leaflet(iom) %>%
addProviderTiles(providers$Esri.WorldImagery) %>%
setView(lng = -104, lat = 30, zoom = 06) %>%
addMarkers(~lon, ~lat, popup = ~label, clusterOptions = markerClusterOptions(), icon = pins ) %>%
addScaleBar(position = "bottomleft")
m
iom$label <- paste0(
"<h1>Cause of death: ",iom$cause,"</h1>
<h3>year: </b>",iom$year,"</h3>
<b>location: </b>",iom$location,"<br/>
<b>Source: </b>",iom$source,"<br/>"
)
m <- leaflet(iom) %>%
addProviderTiles(providers$Esri.WorldImagery) %>%
setView(lng = -104, lat = 30, zoom = 06) %>%
addMarkers(~lon, ~lat, popup = ~label, clusterOptions = markerClusterOptions(), icon = pins ) %>%
addScaleBar(position = "bottomleft")
m
iom$label <- paste0(
"<h1>",iom$cause,"</h1>
<h3>year: </b>",iom$year,"<br/>
location: ",iom$location,"<br/>
=======
>>>>>>> f68db295af20a932141b67e8a1ff23259a2b1d47
Source: </b>",iom$source,"</h3>"
)
m <- leaflet(iom) %>%
addProviderTiles(providers$Esri.WorldImagery) %>%
setView(lng = -104, lat = 30, zoom = 06) %>%
addMarkers(~lon, ~lat, popup = ~label, clusterOptions = markerClusterOptions(), icon = pins ) %>%
addScaleBar(position = "bottomleft")
m
iom$label <- paste0(
"<h1>",iom$cause,"</h1>
<h3>year: </b>",iom$year,"<br/>
location: ",iom$location,"</h3>
<i>Source: ",iom$source,"</i>"
)
m <- leaflet(iom) %>%
addProviderTiles(providers$Esri.WorldImagery) %>%
setView(lng = -104, lat = 30, zoom = 06) %>%
addMarkers(~lon, ~lat, popup = ~label, clusterOptions = markerClusterOptions(), icon = pins ) %>%
addScaleBar(position = "bottomleft")
m
m <- leaflet(iom) %>%
addProviderTiles(providers$CartoDB.VoyagerLabelsUnder) %>%
setView(lng = -104, lat = 30, zoom = 06) %>%
addMarkers(~lon, ~lat, popup = ~label, clusterOptions = markerClusterOptions(), icon = pins ) %>%
addScaleBar(position = "bottomleft")
m
m <- leaflet(iom) %>%
addProviderTiles(providers$Thunderforest.Landscape) %>%
setView(lng = -104, lat = 30, zoom = 06) %>%
addMarkers(~lon, ~lat, popup = ~label, clusterOptions = markerClusterOptions(), icon = pins ) %>%
addScaleBar(position = "bottomleft")
m
m <- leaflet(iom) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik) %>%
setView(lng = -104, lat = 30, zoom = 06) %>%
addMarkers(~lon, ~lat, popup = ~label, clusterOptions = markerClusterOptions(), icon = pins ) %>%
addScaleBar(position = "bottomleft")
m
m <- leaflet(iom) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik) %>%
setView(lng = -104, lat = 30, zoom = 06) %>%
addMarkers(~lon, ~lat, popup = ~label, clusterOptions = markerClusterOptions(), icon = pins ) %>%
addScaleBar(position = "bottomleft")
m
m <- leaflet(iom) %>%
addProviderTiles(providers$Thunderforest.Transport) %>%
setView(lng = -104, lat = 30, zoom = 06) %>%
addMarkers(~lon, ~lat, popup = ~label, clusterOptions = markerClusterOptions(), icon = pins ) %>%
addScaleBar(position = "bottomleft")
m
m <- leaflet(iom) %>%
addProviderTiles(providers$Stamen.Toner) %>%
setView(lng = -104, lat = 30, zoom = 06) %>%
addMarkers(~lon, ~lat, popup = ~label, clusterOptions = markerClusterOptions(), icon = pins ) %>%
addScaleBar(position = "bottomleft")
m
m <- leaflet(iom) %>%
addProviderTiles(providers$Esri.WorldStreetMap) %>%
setView(lng = -104, lat = 30, zoom = 06) %>%
addMarkers(~lon, ~lat, popup = ~label, clusterOptions = markerClusterOptions(), icon = pins ) %>%
addScaleBar(position = "bottomleft")
m
# --------------------------------- #
#               DEAD                #
#           AND MISSING             #
#             MIGRANTS              #
# --------------------------------- #
library("sf")
library("rnaturalearth")
library("geojsonsf")
library("cartography")
library("cartogram")
library("SpatialPosition")
# ********************************
# ********** GEOMETRIES **********
# ********************************
prj <- "+proj=aea +lat_1=14.5 +lat_2=32.5 +lat_0=24 +lon_0=-105 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs"
# --- COUNTRIES ---
countries <- ne_countries(scale = 50, type = "countries", continent = NULL,
country = NULL, geounit = NULL, sovereignty = NULL,
returnclass = "sf")
countries <- countries[countries$adm0_a3 %in% c("MEX","USA"),]
countries <- st_transform(countries,crs = prj)
# --- FENCES ---
# https://data.world/carlvlewis/border-fence-boundaries-u-s-mexico
# https://www.revealnews.org/article/the-wall-building-a-continuous-u-s-mexico-barrier-would-be-a-tall-order/
fences <- geojson_sf("../data/data.world/border-fence.geojson")
fences <- st_transform(fences,crs = prj)
# --- RIVERS ---
rivers <- ne_download(scale = 50, type = "rivers_lake_centerlines", category = "physical", returnclass = "sf")
rivers <- st_transform(rivers,crs = prj)
# --- COASTS ---
coastline <- ne_download(scale = 50, type = "coastline", category = "physical", returnclass = "sf")
coastline <- st_transform(coastline,crs = prj)
# --- ocean ---
ocean <- ne_download(scale = 50, type = "ocean", category = "physical", returnclass = "sf")
ocean <- st_transform(ocean,crs = prj)
fences <- geojson_sf("../data/data.world/border-fence.geojson")
m <- leaflet(iom) %>%
addProviderTiles(providers$Esri.WorldStreetMap) %>%
setView(lng = -104, lat = 30, zoom = 06) %>%
addMarkers(~lon, ~lat, popup = ~label, clusterOptions = markerClusterOptions(), icon = pins ) %>%
addScaleBar(position = "bottomleft") %>%
addPolylines(data = fences)
m
rivers <- ne_download(scale = 50, type = "rivers_lake_centerlines", category = "physical", returnclass = "sf")
m <- leaflet(iom) %>%
addProviderTiles(providers$Esri.WorldStreetMap) %>%
setView(lng = -104, lat = 30, zoom = 06) %>%
addMarkers(~lon, ~lat, popup = ~label, clusterOptions = markerClusterOptions(), icon = pins ) %>%
addScaleBar(position = "bottomleft") %>%
addPolylines(data = fences) %>%
addPolylines(data = rivers)
m
m <- leaflet(iom) %>%
addProviderTiles(providers$Esri.WorldStreetMap) %>%
setView(lng = -104, lat = 30, zoom = 06) %>%
addMarkers(~lon, ~lat, popup = ~label, clusterOptions = markerClusterOptions(), icon = pins ) %>%
addScaleBar(position = "bottomleft") %>%
addPolylines(data = fences, fill="red") %>%
m
m <- leaflet(iom) %>%
addProviderTiles(providers$Esri.WorldStreetMap) %>%
setView(lng = -104, lat = 30, zoom = 06) %>%
addMarkers(~lon, ~lat, popup = ~label, clusterOptions = markerClusterOptions(), icon = pins ) %>%
addScaleBar(position = "bottomleft") %>%
addPolylines(data = fences) %>%
m
m <- leaflet(iom) %>%
addProviderTiles(providers$Esri.WorldStreetMap) %>%
setView(lng = -104, lat = 30, zoom = 06) %>%
addMarkers(~lon, ~lat, popup = ~label, clusterOptions = markerClusterOptions(), icon = pins ) %>%
addScaleBar(position = "bottomleft") %>%
addPolylines(data = fences) %>%
m
library(leaflet)
# Data import and shaping
iom <- read.csv("../data/iom/MissingMigrants-Global-2019-09-04T11-59-55.csv", stringsAsFactors = F)
iom <- iom[(iom$Location.Coordinates)!="",]
iom <- iom[iom$Region.of.Incident =="US-Mexico Border",]
latlon <- matrix(as.numeric(unlist(strsplit(iom$Location.Coordinates, split = ", "))), ncol = 2, byrow = T)
colnames(latlon) <- c("lat", 'lon')
iom <- cbind(iom, latlon)
iom <- iom[,c("Reported.Year","Total.Dead.and.Missing","lat","lon","Location.Description","Cause.of.Death","Information.Source")]
colnames(iom) <- c("year","deads","lat","lon","location","cause","source")
fences <- geojson_sf("../data/data.world/border-fence.geojson")
# Disaggregation
iom_unique <- iom[iom$deads == 1,]
iom_multi <-  iom[iom$deads > 1,]
for (i in 1:dim(iom_multi)[1]){
nb <- as.numeric(iom_multi[i,"deads"])[1]
tmp <- iom_multi[i,]
tmp$deads <- 1
for (j in 1:nb){ iom_unique <- rbind(iom_unique,tmp)}
}
iom <- iom_unique
pins <- makeIcon(
iconUrl = "../data/pin.svg",
iconWidth = 30, iconHeight = 30,
iconAnchorX = 15, iconAnchorY = 15
)
iom$label <- paste0(
"<h1>",iom$cause,"</h1>
<h3>year: </b>",iom$year,"<br/>
location: ",iom$location,"</h3>
<i>Source: ",iom$source,"</i>"
)
m <- leaflet(iom) %>%
addProviderTiles(providers$Esri.WorldStreetMap) %>%
setView(lng = -104, lat = 30, zoom = 06) %>%
addMarkers(~lon, ~lat, popup = ~label, clusterOptions = markerClusterOptions(), icon = pins ) %>%
addScaleBar(position = "bottomleft") %>%
addPolylines(data = fences) %>%
m
m <- leaflet(iom) %>%
addProviderTiles(providers$Esri.WorldStreetMap) %>%
setView(lng = -104, lat = 30, zoom = 06) %>%
addMarkers(~lon, ~lat, popup = ~label, clusterOptions = markerClusterOptions(), icon = pins ) %>%
addScaleBar(position = "bottomleft") %>%
addPolylines(data = fences, fill = "red")
m
m <- leaflet(iom) %>%
addProviderTiles(providers$Esri.WorldStreetMap) %>%
setView(lng = -104, lat = 30, zoom = 06) %>%
addMarkers(~lon, ~lat, popup = ~label, clusterOptions = markerClusterOptions(), icon = pins ) %>%
addScaleBar(position = "bottomleft") %>%
addPolylines(data = fences, color = "red")
m
m <- leaflet(iom) %>%
addProviderTiles(providers$Esri.WorldStreetMap) %>%
setView(lng = -104, lat = 30, zoom = 06) %>%
addMarkers(~lon, ~lat, popup = ~label, clusterOptions = markerClusterOptions(), icon = pins ) %>%
addScaleBar(position = "bottomleft") %>%
addPolylines(data = fences, color = "red", weight = 2)
m
m <- leaflet(iom) %>%
addProviderTiles(providers$Esri.WorldStreetMap) %>%
setView(lng = -104, lat = 30, zoom = 06) %>%
addMarkers(~lon, ~lat, popup = ~label, clusterOptions = markerClusterOptions(), icon = pins ) %>%
addScaleBar(position = "bottomleft") %>%
addPolylines(data = fences, color = "red", weight = 20)
m
m <- leaflet(iom) %>%
addProviderTiles(providers$Esri.WorldStreetMap) %>%
setView(lng = -104, lat = 30, zoom = 06) %>%
addMarkers(~lon, ~lat, popup = ~label, clusterOptions = markerClusterOptions(), icon = pins ) %>%
addScaleBar(position = "bottomleft") %>%
addPolylines(data = fences, color = "red", weight = 10)
m
m <- leaflet(iom) %>%
addProviderTiles(providers$Esri.WorldStreetMap) %>%
setView(lng = -104, lat = 30, zoom = 06) %>%
addMarkers(~lon, ~lat, popup = ~label, clusterOptions = markerClusterOptions(), icon = pins ) %>%
addScaleBar(position = "bottomleft") %>%
addPolylines(data = fences, color = "red", weight = 5)
m
m <- leaflet(iom) %>%
addProviderTiles(providers$Esri.WorldStreetMap) %>%
setView(lng = -104, lat = 30, zoom = 06) %>%
addMarkers(~lon, ~lat, popup = ~label, clusterOptions = markerClusterOptions(), icon = pins ) %>%
addScaleBar(position = "bottomleft") %>%
addPolylines(data = fences, color = "black", weight = 5)
m
m <- leaflet(iom) %>%
addProviderTiles(providers$Esri.WorldStreetMap) %>%
setView(lng = -104, lat = 30, zoom = 06) %>%
addMarkers(~lon, ~lat, popup = ~label, clusterOptions = markerClusterOptions(), icon = pins ) %>%
addScaleBar(position = "bottomleft") %>%
addPolylines(data = fences, color = "black", weight = 5, opacity = 1)
m
m <- leaflet(iom) %>%
addProviderTiles(providers$Esri.WorldStreetMap) %>%
setView(lng = -104, lat = 30, zoom = 06) %>%
addMarkers(~lon, ~lat, popup = ~label, clusterOptions = markerClusterOptions(), icon = pins ) %>%
addScaleBar(position = "bottomleft") %>%
addPolylines(data = fences, color = "black", weight = 7, opacity = 1)
m
palRaster <- colorBin("Spectral", bins = 7, domain = iom$death, na.color = "transparent")
palRaster
plot(palRaster)
library("SpatialPosition")
res <- 25000
span <- 75000
plot(st_geometry(countries))
unk <- CreateGrid(w = as(iom_sf, 'Spatial'), res = res)
plot(iom_sf)
plot(st_geometry(iom_sf))
plot(st_geometry(unk), add=T)
plot(unk, add=T)
plot(st_geometry(iom_sf))
plot(unk, add=T)
plot(unk)
library(leaflet)
# Data import and shaping
iom <- read.csv("../data/iom/MissingMigrants-Global-2019-09-04T11-59-55.csv", stringsAsFactors = F)
iom <- iom[(iom$Location.Coordinates)!="",]
iom <- iom[iom$Region.of.Incident =="US-Mexico Border",]
latlon <- matrix(as.numeric(unlist(strsplit(iom$Location.Coordinates, split = ", "))), ncol = 2, byrow = T)
colnames(latlon) <- c("lat", 'lon')
iom <- cbind(iom, latlon)
iom <- iom[,c("Reported.Year","Total.Dead.and.Missing","lat","lon","Location.Description","Cause.of.Death","Information.Source")]
colnames(iom) <- c("year","deads","lat","lon","location","cause","source")
fences <- geojson_sf("../data/data.world/border-fence.geojson")
# Disaggregation
iom_unique <- iom[iom$deads == 1,]
iom_multi <-  iom[iom$deads > 1,]
for (i in 1:dim(iom_multi)[1]){
nb <- as.numeric(iom_multi[i,"deads"])[1]
tmp <- iom_multi[i,]
tmp$deads <- 1
for (j in 1:nb){ iom_unique <- rbind(iom_unique,tmp)}
}
iom <- iom_unique
pins <- makeIcon(
iconUrl = "../data/pin.svg",
iconWidth = 30, iconHeight = 30,
iconAnchorX = 15, iconAnchorY = 15
)
iom$label <- paste0(
"<h1>",iom$cause,"</h1>
<h3>year: </b>",iom$year,"<br/>
location: ",iom$location,"</h3>
<i>Source: ",iom$source,"</i>"
)
m <- leaflet(iom) %>%
addProviderTiles(providers$Esri.WorldStreetMap) %>%
setView(lng = -104, lat = 30, zoom = 06) %>%
addMarkers(~lon, ~lat, popup = ~label, clusterOptions = markerClusterOptions(), icon = pins ) %>%
addScaleBar(position = "bottomleft") %>%
addPolylines(data = fences, color = "black", weight = 7, opacity = 1)
m
library("SpatialPosition")
res <- 25000
span <- 75000
unk <- CreateGrid(w = as(iom, 'Spatial'), res = res)
library("SpatialPosition")
res <- 25000
span <- 75000
unk <- CreateGrid(w = as(iom, 'Spatial'), res = res)
unk <- CreateGrid(w = as(iom_sf, 'Spatial'), res = res)
class(unk)
plot(unk)
# --- MAP 5 : SMOOTH ---
View(iom_sf)
x <- smoothLayer(x = iom_sf, var = 'deads',
span = 4000, beta = 2,
mask = mtq, border = NA,
col = carto.pal(pal1 = 'wine.pal', n1 = 8),
legend.title.txt = "Population\nPotential",
legend.pos = "topright", legend.values.rnd = 0)
x <- smoothLayer(x = iom_sf, var = 'deads',
span = 4000, beta = 2,
mask = countries, border = NA,
col = carto.pal(pal1 = 'wine.pal', n1 = 8),
legend.title.txt = "Population\nPotential",
legend.pos = "topright", legend.values.rnd = 0)
x <- smoothLayer(x = iom_sf, var = 'deads',
span = 1000, beta = 2,
mask = countries, border = NA,
col = carto.pal(pal1 = 'wine.pal', n1 = 8),
legend.title.txt = "Population\nPotential",
legend.pos = "topright", legend.values.rnd = 0)
plot(st_geometry(x))
<<<<<<< HEAD
# --------------------------------- #
#               DEAD                #
#           AND MISSING             #
#             MIGRANTS              #
# --------------------------------- #
=======
>>>>>>> f68db295af20a932141b67e8a1ff23259a2b1d47
library("sf")
library("rnaturalearth")
library("geojsonsf")
library("cartography")
library("cartogram")
library("SpatialPosition")
<<<<<<< HEAD
=======
library(units)
>>>>>>> f68db295af20a932141b67e8a1ff23259a2b1d47
# ********************************
# ********** GEOMETRIES **********
# ********************************
prj <- "+proj=aea +lat_1=14.5 +lat_2=32.5 +lat_0=24 +lon_0=-105 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs"
# --- COUNTRIES ---
countries <- ne_countries(scale = 50, type = "countries", continent = NULL,
country = NULL, geounit = NULL, sovereignty = NULL,
returnclass = "sf")
countries <- countries[countries$adm0_a3 %in% c("MEX","USA"),]
countries <- st_transform(countries,crs = prj)
# --- FENCES ---
# https://data.world/carlvlewis/border-fence-boundaries-u-s-mexico
# https://www.revealnews.org/article/the-wall-building-a-continuous-u-s-mexico-barrier-would-be-a-tall-order/
fences <- geojson_sf("../data/data.world/border-fence.geojson")
<<<<<<< HEAD
=======
plot(st_geometry(fences))
>>>>>>> f68db295af20a932141b67e8a1ff23259a2b1d47
fences <- st_transform(fences,crs = prj)
# --- RIVERS ---
rivers <- ne_download(scale = 50, type = "rivers_lake_centerlines", category = "physical", returnclass = "sf")
rivers <- st_transform(rivers,crs = prj)
# --- COASTS ---
coastline <- ne_download(scale = 50, type = "coastline", category = "physical", returnclass = "sf")
coastline <- st_transform(coastline,crs = prj)
# --- ocean ---
ocean <- ne_download(scale = 50, type = "ocean", category = "physical", returnclass = "sf")
ocean <- st_transform(ocean,crs = prj)
<<<<<<< HEAD
# ********************************
# ************* DATA *************
# ********************************
# --- Missing migrants
iom <- read.csv("../data/iom/MissingMigrants-Global-2019-09-04T11-59-55.csv", stringsAsFactors = F)
iom <- iom[(iom$Location.Coordinates)!="",]
latlon <- matrix(as.numeric(unlist(strsplit(iom$Location.Coordinates, split = ", "))), ncol = 2, byrow = T)
colnames(latlon) <- c("lat", 'lon')
iom <- cbind(iom, latlon)
iom <- iom[,c("Web.ID","Reported.Year","Total.Dead.and.Missing","Number.of.Survivors","Region.of.Incident","lat","lon")]
colnames(iom) <- c("id","year","deads","survivors","region","latitude","longitude")
iom$deads <- as.numeric(iom$deads)
iom <- iom[!is.na(iom$deads),]
iom$latitude <- as.numeric(iom$latitude)
iom$longitude <- as.numeric(iom$longitude)
iom_sf <- st_as_sf(iom, coords = c("longitude", "latitude"), crs = 4326, agr = "constant")
iom_sf <- st_transform(iom_sf,crs = prj)
# ********************************
# ************* CHARTS *************
# ********************************
# Regional Comparison
par(mar=c(10,8,4,2))
med <- aggregate(iom_sf$deads,list(iom_sf$region), sum, simplify = TRUE )
colnames(med) <- c("region","nb")
total <- round(sum(med$nb),-2)
cols <- rep("#ffbaba",length(med$region))
cols[c(7,15)] <- "red"
barplot(med$nb, ylab="Number of persons", names.arg=med$region, las=2, border="#991313",col=cols)
# Time Trend
iom_sf <- iom_sf[iom_sf$region =="US-Mexico Border",]
par(mar=c(5,8,4,2))
med <- aggregate(iom_sf$deads,list(iom_sf$year), sum, simplify = TRUE )
colnames(med) <- c("year","nb")
total <- round(sum(med$nb),-2)
med[med$year==2019,"year"] <- "2019*"
barplot(med$nb, xlab=paste0("Total over the perdiod: ",total,"\n(*) from January 1 to Sept. 3 2019"), ylab="Number of persons", names.arg=med$year,
border="#991313",col=c("red","red","red","red","red","#ffbaba"))
# --- MAP TEMPLATE ---
lay <- function(title = ""){
authors <- "N. Lambert & R. Ysebaert, 2019\nData source: IOM, 2019"
par(mar = c(0,0,1.2,0))
plot(st_geometry(ocean), col= "#b8d5e3", border = NA, ylim = st_bbox(iom_sf)[c(2,4)], xlim = st_bbox(iom_sf)[c(1,3)])
plot(st_geometry(countries) + c(-10000, -10000), col ="#827e6c50", border = NA, add= T)
plot(st_geometry(countries), col= "#ede6bb", border = "white", cex = 0.5, add=T)
plot(st_geometry(coastline), col= "#6d9cb3",lwd = 1 ,add= T)
plot(st_geometry(rivers), col= "#6d9cb3",lwd = 1 ,add= T)
plot(st_geometry(fences), col= "#3d3c3c",lwd = 3 ,add= T)
layoutLayer(title = title,
author =  authors,
scale = 300, south = TRUE, frame = TRUE,
col = "#6d9cb3", coltitle = "white")
}
# typoLayer(x = fences, var="gen_type",
#           col = c("red", "blue"),
#           legend.values.order = c("pedestrian","vehicle"),
#           legend.pos = "topleft",
#           legend.title.txt = "USA - MEX border",
#           legend.nodata = "Unknown", add= T, lwd = 10)
# --- MAP 1 ---
lay("USA-Mexico border")
plot(st_geometry(iom_sf), pch=20, col= "#eb3850", cex = 0.5, add=T)
lay("USA-Mexico border")
propSymbolsLayer(x = iom_sf, var = "deads",
symbols = "circle", col =  "#eb3850",
legend.pos = "left", border = "black", lwd = 0.5,
legend.title.txt = "Dead\nand missing\nmigrants,\n2014 - 2019",
legend.style = "e")
# --- MAP 3 : Dorling ----
iom_sf$m_weight <- 1
iom_sf$m_weight[iom_sf$deads > 1] <- 0.5
iom_sf$m_weight[iom_sf$deads >= 25] <- 0
deathsdor <- cartogram_dorling(x = st_jitter(iom_sf),weight = "deads", m_weight = iom_sf$m_weight, k = .4)
lay("USA-Mexico border")
plot(st_geometry(deathsdor), pch=20, col= "#eb3850", border ="#ede6bb", cex = 0.1, add=T)
plot(st_geometry(fences), col= "#3d3c3c", lwd = 3 ,add= T)
# --- MAP 4 : Dorling (disintegrated) ----
all <- iom_sf[,c("id","deads","year","geometry")]
iom_unique <- all[all$deads == 1,]
iom_multi <-  all[all$deads > 1,]
for (i in 1:dim(iom_multi)[1]){
nb <- as.numeric(iom_multi[i,"deads"])[1]
tmp <- iom_multi[i,]
tmp$deads <- 1
for (j in 1:nb){ iom_unique <- rbind(iom_unique,tmp)}
}
deathsdor2 <- cartogram_dorling(x = st_jitter(iom_unique),weight = "deads", k = .004)
lay("USA-Mexico border")
plot(st_geometry(deathsdor2), pch=20, col= "#eb3850", border ="#ede6bb", cex = 0.1, add=T)
plot(st_geometry(fences), col= "#3d3c3c", lwd = 3 ,add= T)
library(leaflet)
# Data import and shaping
iom <- read.csv("../data/iom/MissingMigrants-Global-2019-09-04T11-59-55.csv", stringsAsFactors = F)
iom <- iom[(iom$Location.Coordinates)!="",]
iom <- iom[iom$Region.of.Incident =="US-Mexico Border",]
latlon <- matrix(as.numeric(unlist(strsplit(iom$Location.Coordinates, split = ", "))), ncol = 2, byrow = T)
colnames(latlon) <- c("lat", 'lon')
iom <- cbind(iom, latlon)
iom <- iom[,c("Reported.Year","Total.Dead.and.Missing","lat","lon","Location.Description","Cause.of.Death","Information.Source")]
colnames(iom) <- c("year","deads","lat","lon","location","cause","source")
fences <- geojson_sf("../data/data.world/border-fence.geojson")
# Disaggregation
iom_unique <- iom[iom$deads == 1,]
iom_multi <-  iom[iom$deads > 1,]
for (i in 1:dim(iom_multi)[1]){
nb <- as.numeric(iom_multi[i,"deads"])[1]
tmp <- iom_multi[i,]
tmp$deads <- 1
for (j in 1:nb){ iom_unique <- rbind(iom_unique,tmp)}
}
iom <- iom_unique
pins <- makeIcon(
iconUrl = "../data/pin.svg",
iconWidth = 30, iconHeight = 30,
iconAnchorX = 15, iconAnchorY = 15
)
iom$label <- paste0(
"<h1>",iom$cause,"</h1>
<h3>year: </b>",iom$year,"<br/>
location: ",iom$location,"</h3>
<i>Source: ",iom$source,"</i>"
)
m <- leaflet(iom) %>%
addProviderTiles(providers$Esri.WorldStreetMap) %>%
setView(lng = -104, lat = 30, zoom = 06) %>%
addMarkers(~lon, ~lat, popup = ~label, clusterOptions = markerClusterOptions(), icon = pins ) %>%
addScaleBar(position = "bottomleft") %>%
addPolylines(data = fences, color = "black", weight = 7, opacity = 1)
m
=======
library(OECD)
library(ggplot2)
as.data.frame(search_dataset("GDP", data = get_datasets()))
dstruc <- get_data_structure("PDB_LV")
str(dstruc, max.level = 2)
dstruc$VAR
dstruc$INDICATOR
dstruc$MEASURE
dstruc$POWERCODE
df <- get_dataset(dataset = "PDB_LV", filter = list(c("MEX", "USA","OECD"),
"T_GDPPOP",
"CPC"))
df$obsTime <- as.numeric(df$obsTime)
qplot(data = df, x = obsTime, y = obsValue, color = LOCATION, geom = "line") +
labs(x = NULL, y = "USD, current prices, current PPPs", color = NULL,
title = "GDP per head of population")
# Moins de 20 ans
as.data.frame(search_dataset("population", data = get_datasets()))
dstruc <- get_data_structure("POP_PROJ")
dstruc$VAR_DESC
dstruc$AGE
filter_list <- list(c("MEX","USA","OECD"),"TT","D1TTR5Y4")
df <- as.data.frame(get_dataset(dataset = "POP_PROJ", filter = filter_list))
df$obsTime <- as.numeric(df$obsTime)
qplot(data = df, x = obsTime, y = obsValue, color = LOCATION, geom = "line") +
labs(x = NULL, y = "%", color = NULL,
title = "Part de la population âgée de moins de 20 ans")
# --- admin level 12
subregions <- st_read(dsn = "../data/regions/mex_us_admin_1.shp",options = "ENCODING=UTF-8",
stringsAsFactors = FALSE)
subregions <- st_transform(subregions,crs = prj)
#  DATA -- PIB & demo (level 1-2)
pib <- read.csv("../data/regions/PIB.csv", sep = "\t", encoding = "UTF-8", dec = ",",
stringsAsFactors=FALSE)
pop <- read.csv("../data/regions/POP.csv", sep = "\t", encoding = "UTF-8", dec = ",",
stringsAsFactors=FALSE)
subregions <- merge (x = subregions, y = pib,
by.x = "ID_ADMIN_1",
by.y = "ID_ADMIN",
all.x = TRUE)
subregions <- merge (x = subregions, y = pop,
by.x = "ID_ADMIN_1",
by.y = "ID_ADMIN",
all.x = TRUE)
# Intersect with bounding box (pas optimal)
bbox <- st_as_sfc(st_bbox(c(xmin = -1832288 , xmax = 1500000, ymax = 1450000, ymin = -830000),
crs = prj))
bboxocean <- st_as_sfc(st_bbox(c(xmin = -1342784, xmax = 93341.2, ymin = -739750.5, ymax = 1317850)))
subregions1 <- st_intersection(x = subregions, st_geometry(bbox))
par(mar = c(0,0,1.2,0))
# Indice de vieillessement
plot(st_geometry(ocean), col= "#b8d5e3", border = NA, ylim = st_bbox(iom_sf)[c(2,4)], xlim = st_bbox(iom_sf)[c(1,3)])
plot(st_geometry(countries) + c(-10000, -10000), col ="#827e6c50", border = NA, add= T)
plot(st_geometry(countries), col= "#ede6bb", border = "white", cex = 0.5, add=T)
choroLayer(x = subregions1, var = "POP65_POP15",
breaks = c(min(subregions1$POP65_POP15, na.rm = T),
25,35,50,65,80,
max(subregions1$POP65_POP15, na.rm = T)),
col = carto.pal(pal1 = "green.pal", n1 = 3,
pal2 = "red.pal", n2 = 3),
legend.pos = "topleft",
legend.title.txt = "Rapport entre la population âgée de plus de 65 ans\net la population âgée de moins de 15 ans en 2015 (%)",
border = NA,
add = TRUE)
# Get borders
subregions.borders <- getBorders(subregions1)
discLayer(x = subregions.borders, df = subregions1,
var = "POP65_POP15", col="black", nclass=3,
method="equal", threshold = 0.4, sizemin = 0.5,
sizemax = 10, type = "abs",legend.values.rnd = 0,
legend.title.txt = "Discontinuités sur l'indice de veillissement 2015\n(différences absolues)",
legend.pos = "left", add=TRUE)
plot(st_geometry(coastline), col= "#6d9cb3",lwd = 1 ,add= T)
layoutLayer(title = "Une barrière démographique... ",
author =  "N. Lambert & R. Ysebaert, 2019\nData source: Didelon, Vandermotten, 2019",
sources = "Didelon, Vandermotten, Dessouroux, 2019",
scale = 300, south = TRUE, frame = TRUE,
col = "#6d9cb3", coltitle = "white")
plot(st_geometry(ocean), col= "#b8d5e3", border = NA, ylim = st_bbox(bboxocean)[c(2,4)],
xlim = st_bbox(bboxocean)[c(1,3)])
plot(st_geometry(countries) + c(-10000, -10000), col ="#827e6c50", border = NA, add= T)
plot(st_geometry(countries), col= "#ede6bb", border = "white", cex = 0.5, add=T)
choroLayer(x = subregions1, var = "PIB100_2017",
breaks = c(min(subregions1$PIB100_2017, na.rm = T),
75,90,100,125,150,200,
max(subregions1$PIB100_2017, na.rm = T)),
col = carto.pal(pal1 = "red.pal", n1 = 3,
pal2 = "green.pal", n2 = 5),
legend.pos = "topleft",
legend.title.txt = "PIB par habitant 2017\n(100 = moyenne mondiale)",
border = NA,
add = TRUE)
# Get borders
discLayer(x = subregions.borders, df = subregions1,
var = "PIB100_2017", col="black", nclass=3,
method="equal", threshold = 0.2, sizemin = 0.5,
sizemax = 10, type = "abs",legend.values.rnd = 0,
legend.title.txt = "Discontinuités de PIB par habitant 2017\n(différences absolues)",
legend.pos = "left", add=TRUE)
plot(st_geometry(coastline), col= "#6d9cb3",lwd = 1 ,add= T)
layoutLayer(title = "Doublé d'un mur de richesse... Mais quelles conséquences ?",
author =  "N. Lambert & R. Ysebaert, 2019\nData source: Didelon, Vandermotten, OpenStreetMap et contributeurs, 2019",
sources = "Didelon, Vandermotten, Dessouroux, 2019",
scale = 300, south = TRUE, frame = TRUE,
col = "#6d9cb3", coltitle = "white")
library(osmdata)
# Convert bbox in WGS84
bbox <- st_transform(bbox, 4326)
# define and launch the query
opqbox <- opq(bbox = bbox , timeout = 5000)
opquery <- add_osm_feature(opq = opqbox, key = "barrier", value = "border_control")
feat <- osmdata_sf(opquery)
# Extraire les points qui répondent à la requête
featpt <- st_transform(feat$osm_points, prj)
featpt <- featpt[featpt[["barrier"]] %in% "border_control", ]
# Extraire les polygones qui répondent à la requête
featpo <- st_transform(feat$osm_polygons, prj)
st_geometry(featpo) <- st_centroid(st_geometry(featpo))
featpo$osm_id <- row.names(featpo)
featpt <- rbind(featpt[, c("osm_id", "geometry")], featpo[, c("osm_id", "geometry")])
poi_osm <- st_intersection(x = featpt, st_geometry(subregions1))
# Représentation des points extraits
plot(st_geometry(fences), col = "red", add = TRUE)
plot(st_geometry(rivers), col = "lightblue", add = TRUE)
plot(st_geometry(poi_osm), bg = "orange", col = "black", pch = 21, cex = 0.8, add = TRUE)
# Create grid
grid <- st_make_grid(subregions1, cellsize = 50000)
grid <- st_sf(grid)
# Compter le nombre de postes de police par points de grille
grid$ncops <- lengths(st_covers(grid, poi_osm))
grid$dcops <- grid$ncops / set_units(st_area(grid), "km^2")
# Plusieurs façons de visualiser les résultats (tests)
grid_ncont <- cartogram_ncont(grid, "ncops")
plot(grid_ncont$geometry, col="red", add = T)
propSymbolsLayer(grid, var = "ncops", col = "red", symbols = "square", add = T,
legend.pos = "topright",
legend.title.txt = "Nombre de postes frontière\n(zones de 50km²)")
choroLayer(x = grid, var = "ncops",
breaks = c(0.535, 5, 10,20,66),
col = carto.pal(pal1 = "pink.pal", n1 = 4),
legend.pos = "topright",
legend.title.txt = "Nombre de postes frontière\n(zones de 50km²)",
border = NA,
add = TRUE)
library(cartogram)
subregions <- st_cast(subregions, "MULTIPOLYGON")
subregions_cont <- cartogram_dorling(subregions,weight = "POP_2015")
subregions_cont <- cartogram_cont(subregions,weight = "POP_2015", itermax = 50)
choroLayer(x = subregions_cont, var = "PIB100_2017",
breaks = c(min(subregions_cont$PIB100_2017, na.rm = T),
75,90,100,125,150,200,
max(subregions_cont$PIB100_2017, na.rm = T)),
col = carto.pal(pal1 = "red.pal", n1 = 3,
pal2 = "green.pal", n2 = 5),
legend.pos = "topleft",
legend.title.txt = "PIB par habitant 2017\n(100 = moyenne mondiale)",
border = "white")
>>>>>>> f68db295af20a932141b67e8a1ff23259a2b1d47
