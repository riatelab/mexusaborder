library(sf)
library(osmdata)
exportosm <- function(loc, prj, xy, fn){
center <- st_as_sf(data.frame(x=xy[1], y=xy[2]), coords=(c("x","y")), crs = 4326)
center <- st_transform(center, prj)
center <- st_buffer(center, dist = 8000)
# define a bounding box
q0 <- opq(st_bbox(st_transform(center, 4326)))
# extract Bars
q6 <- add_osm_feature(opq = q0, key = 'amenity', value = "bar")
res6 <- osmdata_sf(q6)
barpts <- res6$osm_points
barpol <- res6$osm_polygons
barpts <- st_transform(barpts, prj)
barpol <- st_transform(barpol, prj)
barpts <- barpts[!is.na(barpts$amenity),]
st_geometry(barpol) <- st_centroid(st_geometry(barpol))
bar <- rbind(barpts[,c("name", "amenity")], barpol[,c("name", "amenity")])
# extract Pub
q7 <- add_osm_feature(opq = q0, key = 'amenity', value = "pub")
res7 <- osmdata_sf(q7)
pubpts <- res7$osm_points
pubpol <- res7$osm_polygons
pubpts <- st_transform(pubpts, prj)
pubpol <- st_transform(pubpol, prj)
pubpts <- pubpts[!is.na(pubpts$amenity),]
st_geometry(pubpol) <- st_centroid(st_geometry(pubpol))
pub <- rbind(pubpts[,c("name", "amenity")], pubpol[,c("name", "amenity")])
# extract cafe
q8 <- add_osm_feature(opq = q0, key = 'amenity', value = "cafe")
res8 <- osmdata_sf(q8)
cafpts <- res8$osm_points
cafpol <- res8$osm_polygons
cafpts <- st_transform(cafpts, prj)
cafpol <- st_transform(cafpol, prj)
cafpts <- cafpts[!is.na(cafpts$amenity),]
st_geometry(cafpol) <- st_centroid(st_geometry(cafpol))
caf <- rbind(cafpts[,c("name", "amenity")], cafpol[,c("name", "amenity")])
feat <- rbind(caf, bar, pub)
## We only keep the bars and pubs within Paris boundaries
st_agr(center) <- "constant"
st_agr(feat) <- "constant"
feat <- st_intersection(x = feat, y = st_geometry(center))
# Get major roads from osm
bb      <- center %>% st_transform(4326) %>% st_bbox()
q       <- opq(bbox = bb,timeout = 180)
qm      <- add_osm_feature (q, key = 'highway',value = 'motorway', value_exact = FALSE)
qt      <- add_osm_feature (q, key = 'highway',value = 'trunk', value_exact = FALSE)
qp      <- add_osm_feature (q, key = 'highway',value = 'primary', value_exact = FALSE)
motorway <- osmdata_sf(qm)
trunk   <- osmdata_sf(qt)
primary <- osmdata_sf(qp)
motorway$osm_lines[,'name'] <- "a"
road    <- rbind(primary$osm_lines[,'name'],trunk$osm_lines[,'name'],motorway$osm_lines[,'name']) %>%
st_transform(st_crs(center))
road <- st_union(st_intersection(st_geometry(road),center))
x <- st_buffer(road,70)
road <- st_buffer(x,-65)
qr <- q %>%   add_osm_feature (key = 'waterway')
river <- osmdata_sf(qr)
river <- st_geometry(river$osm_poly)%>%
st_transform(st_crs(center)) %>%
st_intersection(st_geometry(center)) %>%
st_union()
river2 <- osmdata_sf(qr)
river2 <- st_geometry(river2$osm_line)%>%
st_transform(st_crs(center)) %>%
st_intersection(st_geometry(center)) %>%
st_union()
qw  <- q %>%   add_osm_feature (key = 'natural', value = "coastline")
coast <- osmdata_sf(qw)
coast <- coast$osm_lines
if(!is.null(coast)){
coast <- st_transform(coast, st_crs(center))%>%
st_intersection(st_geometry(center)) %>%
st_union()
}
# save data to avoid over downloading
save(list= c("feat", "center", "road", "river", "river2","coast"),
file = fn, compress = "xz")
}
exportosm(loc = "NYC",
prj = 32618,
xy  = c(-73.9867, 40.7328),
fn  = "data/nyc.RData")
exportosm(loc = "BCL",
prj = 32631,
xy  = c(2.1758, 41.3991),
fn  = "data/bcl.RData")
library(cartography)
library(raster)
library(spatstat)
library(maptools)
library(viridis)
library(tanaka)
library(sp)
library(sf)
fufun <- function(feat, center, river, river2, coast, road, title){
feat <- as(feat,'Spatial')
coords <- unique(coordinates(feat))
pts <- ppp(x = coords[,1], y = coords[,2],
window = as.owin(st_geometry(center), "Spatial"))
ds <- density.ppp(x = pts, sigma = 150, eps = 100)
ras <- raster(ds, crs = proj4string(feat)) * 1000 * 1000
ras[is.na(ras)] <- 0
ras[ras<0] <- 0
bks <- c(0,5,10,20,40,60,80,seq(100, 500, 40), 600,700,800)
iso <- tanaka_contour(ras,breaks = bks, mask=center)
pal <- inferno(nrow(iso))
pal[1] <- "#fee8c8"
pal[2] <- "#8c6bb1"
pal[3] <- "#88419d"
tanaka(iso,  mask = center, col = pal[], shift = 10,legend.pos = "n",
light = "grey80", dark = "grey20",
legend.title = "Smoothed\nbar density\n(bars/km2)")
plot(road, add=T, col = "#FE9F6D50",border ="#FE9F6D50")
if(!is.null(river)){plot(river, add=T, col = "#50bbea",border ="#50bbea", lwd=0.2)}
if(!is.null(river2)){plot(river2, add=T, col = "blue", lwd=1)}
if(!is.null(coast)){plot(st_geometry(coast), add=T, col = "red", lwd=1)}
#plot(center$geometry, border = "white", lwd = 2, col = NA,add=TRUE)
text(x =par()$usr[1]+2500,y =par()$usr[4]-2500, labels= title,
col = "black", srt=45, cex = 2)
}
library(cartography)
library(raster)
library(spatstat)
library(maptools)
library(viridis)
library(tanaka)
library(sp)
library(sf)
fufun <- function(feat, center, river, river2, coast, road, title){
feat <- as(feat,'Spatial')
coords <- unique(coordinates(feat))
pts <- ppp(x = coords[,1], y = coords[,2],
window = as.owin(st_geometry(center), "Spatial"))
ds <- density.ppp(x = pts, sigma = 150, eps = 100)
ras <- raster(ds, crs = proj4string(feat)) * 1000 * 1000
ras[is.na(ras)] <- 0
ras[ras<0] <- 0
bks <- c(0,5,10,20,40,60,80,seq(100, 500, 40), 600,700,800)
iso <- tanaka_contour(ras,breaks = bks, mask=center)
pal <- inferno(nrow(iso))
pal[1] <- "#fee8c8"
pal[2] <- "#8c6bb1"
pal[3] <- "#88419d"
tanaka(iso,  mask = center, col = pal[], shift = 10,legend.pos = "n",
light = "grey80", dark = "grey20",
legend.title = "Smoothed\nbar density\n(bars/km2)")
plot(road, add=T, col = "#FE9F6D50",border ="#FE9F6D50")
if(!is.null(river)){plot(river, add=T, col = "#50bbea",border ="#50bbea", lwd=0.2)}
if(!is.null(river2)){plot(river2, add=T, col = "blue", lwd=1)}
if(!is.null(coast)){plot(st_geometry(coast), add=T, col = "red", lwd=1)}
#plot(center$geometry, border = "white", lwd = 2, col = NA,add=TRUE)
text(x =par()$usr[1]+2500,y =par()$usr[4]-2500, labels= title,
col = "black", srt=45, cex = 2)
}
par(mfrow= c(2,3), mar = c(0,0,0,0), bg = "#f4e9d3", family = "Nanum Pen")
load("data/ldn.RData")
fufun(feat,center, river, river2, coast, road, title = "Londres")
load("data/prs.RData")
fufun(feat,center, river, river2, coast, road, title = "Paris")
load("data/bln.RData")
fufun(feat,center, river, river2, coast, road, title = "Berlin")
load("data/rma.RData")
fufun(feat,center, river, river2, coast, road, title = "Rome")
load("data/nyc.RData")
fufun(feat,center, river, river2, coast, road, title = "New York")
load("data/bcl.RData")
fufun(feat,center, river, river2, coast, road, title = "Barcelone")
pdf("sample.pdf", 7, 5)
par(mfrow= c(2,3), mar = c(0,0,0,0), bg = "#f4e9d3", family = "Nanum Pen")
load("data/ldn.RData")
fufun(feat,center, river, river2, coast, road, title = "Londres")
load("data/prs.RData")
fufun(feat,center, river, river2, coast, road, title = "Paris")
load("data/bln.RData")
fufun(feat,center, river, river2, coast, road, title = "Berlin")
load("data/rma.RData")
fufun(feat,center, river, river2, coast, road, title = "Rome")
load("data/nyc.RData")
fufun(feat,center, river, river2, coast, road, title = "New York")
load("data/bcl.RData")
fufun(feat,center, river, river2, coast, road, title = "Barcelone")
dev.off()
getwd()
getwd()
install.packages(c("blob", "callr", "crul", "deldir", "devtools", "digest", "dplyr", "ellipsis", "FactoMineR", "geometry", "git2r", "haven", "hms", "jsonvalidate", "pillar", "processx", "protolite", "quantreg", "remotes", "rlang", "sf", "spatstat", "tinytex", "usethis", "V8", "vctrs", "xfun", "zip"))
library("sf")
library("rnaturalearth")
countries <- ne_countries(scale = 110, type = "countries", returnclass = "sf")
plot(countries)
plot(st_geometry(countries))
head'countries'
head(countries)
View(countries)
getwd()
# --------------------------------- #
#               DEAD                #
#           AND MISSING             #
#             MIGRANTS              #
# --------------------------------- #
library("sf")
library("rnaturalearth")
library("geojsonsf")
library("cartography")
library("cartogram")
library("SpatialPosition")
# ********************************
# ********** GEOMETRIES **********
# ********************************
prj <- "+proj=aea +lat_1=14.5 +lat_2=32.5 +lat_0=24 +lon_0=-105 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs"
# --- COUNTRIES ---
countries <- ne_countries(scale = 50, type = "countries", continent = NULL,
country = NULL, geounit = NULL, sovereignty = NULL,
returnclass = "sf")
countries <- countries[countries$adm0_a3 %in% c("MEX","USA"),]
countries <- st_transform(countries,crs = prj)
# --- FENCES ---
# https://data.world/carlvlewis/border-fence-boundaries-u-s-mexico
# https://www.revealnews.org/article/the-wall-building-a-continuous-u-s-mexico-barrier-would-be-a-tall-order/
fences <- geojson_sf("../data/data.world/border-fence.geojson")
plot(st_geometry(fences))
fences <- st_transform(fences,crs = prj)
# --- RIVERS ---
rivers <- ne_download(scale = 50, type = "rivers_lake_centerlines", category = "physical", returnclass = "sf")
rivers <- st_transform(rivers,crs = prj)
# --- COASTS ---
coastline <- ne_download(scale = 50, type = "coastline", category = "physical", returnclass = "sf")
coastline <- st_transform(coastline,crs = prj)
# --- ocean ---
ocean <- ne_download(scale = 50, type = "ocean", category = "physical", returnclass = "sf")
ocean <- st_transform(ocean,crs = prj)
# ********************************
# ************* DATA *************
# ********************************
iom <- read.csv("../data/iom/MissingMigrants-Global-2019-09-04T11-59-55.csv", stringsAsFactors = F)
iom <- iom[(iom$Location.Coordinates)!="",]
latlon <- matrix(as.numeric(unlist(strsplit(iom$Location.Coordinates, split = ", "))), ncol = 2, byrow = T)
colnames(latlon) <- c("lat", 'lon')
iom <- cbind(iom, latlon)
iom <- iom[,c("Web.ID","Reported.Year","Total.Dead.and.Missing","Number.of.Survivors","Region.of.Incident","lat","lon")]
colnames(iom) <- c("id","year","deads","survivors","region","latitude","longitude")
iom$deads <- as.numeric(iom$deads)
iom <- iom[!is.na(iom$deads),]
iom$latitude <- as.numeric(iom$latitude)
iom$longitude <- as.numeric(iom$longitude)
iom_sf <- st_as_sf(iom, coords = c("longitude", "latitude"), crs = 4326, agr = "constant")
iom_sf <- st_transform(iom_sf,crs = prj)
iom_sf <- iom_sf[iom_sf$region =="US-Mexico Border",]
iom <- read.csv("../data/iom/MissingMigrants-Global-2019-09-04T11-59-55.csv", stringsAsFactors = F)
# ----------------
# N. LAMBERT, 2019
# ----------------
# Packages
library(raster)
library(sf)
library(cartography)
library(cartogram)
library(geojsonio)
# ----------------------
# Data import & handling
# ----------------------
# Variables
fact <- 2
res <- 1
# Countries
world <- st_read("data/world.shp")
# prj <- "+proj=eck4 +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs"
# world <- st_transform(world, prj)
# Total population grid
r <- raster("data/gpw_v4_population_count_rev11_2020_1_deg.asc")
dots <- aggregate(r, fact=fact, fun=sum)
dots <- as(dots, 'SpatialPointsDataFrame')
dots <- st_as_sf(dots)
colnames(dots) <- c("pop","geometry")
Vew(dots)
View(dots)
# ----------------
# N. LAMBERT, 2019
# ----------------
# Packages
library(raster)
library(sf)
library(cartography)
library(cartogram)
library(geojsonio)
# ----------------------
# Data import & handling
# ----------------------
# Variables
fact <- 2
res <- 1
# Countries
world <- st_read("data/world.shp")
# prj <- "+proj=eck4 +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs"
# world <- st_transform(world, prj)
# Total population grid
r <- raster("data/gpw_v4_population_count_rev11_2020_1_deg.asc")
dots <- aggregate(r, fact=fact, fun=sum)
dots <- as(dots, 'SpatialPointsDataFrame')
dots <- st_as_sf(dots)
colnames(dots) <- c("pop","geometry")
library(raster)
library(sf)
library(cartogram)
# ----------------------
# Data import & handling
# ----------------------
# Variables
fact <- 3
res <- 1
# Countries
world <- st_read("data/world.shp")
# prj <- "+proj=eck4 +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs"
# world <- st_transform(world, prj)
# Total population grid
r <- raster("data/gpw_v4_population_count_rev11_2020_1_deg.asc")
dots <- aggregate(r, fact=fact, fun=sum)
dots <- as(dots, 'SpatialPointsDataFrame')
dots <- st_as_sf(dots)
colnames(dots) <- c("pop","geometry")
# ------------
# Dorling
# ------------
dorlingpop <- cartogram_dorling(x = st_jitter(dots),weight = "pop", m_weight = dots$m_weight, k = .1)
plot(st_geometry(dorlingpop), col= "#eb3850", border ="white")
library(leaflet)
library(bibtex)
library(RefManageR)
library(htmltools)
library(htmlwidgets)
# https://rstudio.github.io/leaflet/markers.html
# DATA IMPORT
bib <- ReadBib(file = "../data/biblio.bib")
bib <- as.data.frame(bib)
bib$id <- row.names(bib)
q <- read.csv("../data/quotes.csv", stringsAsFactors=FALSE)
quotes <- merge(x = q, y = bib, by.x = "book", by.y = "id", all.y=T)
# POPUP FORMATING
col <- "#fce303"
words <- c("carte", "cartes","cartographie","cartographies", "cartographe"," planisphère", "mappemonde")
for (i in 1:length(words)){
quotes$quote <- sub(paste0(" ",words[i]," "), paste0(" <span style='background:",col,"'>",words[i],"</span> </u>"), quotes$quote)
}
quotes$labelhtml <- paste0(
"<div width='300px' align='center'>",
"<h2>",
"« ",quotes$quote," »",
"</h2>",
"<b>",quotes$author,"</b> ",quotes$location,".<br/>",
"<i>",quotes$title,"</i>. ",quotes$publisher,", ",quotes$year,".",
"</div>"
)
# TITLE
title <- tags$div(includeCSS("../css/maptitle.css"), HTML("<i>MapQuote</i>"))
source <- tags$div(includeCSS("../css/mapnote.css"), HTML(paste0("Data & Map designed by <b>Nicolas Lambert</b> & <b>Françoise Bahoken</b>. Last update: ",Sys.Date())))
# PIN
pins <- makeIcon(
iconUrl = "../img/pin.svg",
iconWidth = 30, iconHeight = 30,
iconAnchorX = 15, iconAnchorY = 15
)
m <- leaflet(quotes) %>%
addProviderTiles(providers$Esri.WorldImagery) %>%
addMarkers(~lng, ~lat, popup = ~labelhtml, clusterOptions = markerClusterOptions(), icon = pins ) %>%
addScaleBar(position = "bottomleft") %>%
addControl(title, position = "topleft", className="map-title") %>%
addControl(source, className="map-note")
m
library(leaflet)
library(bibtex)
library(RefManageR)
library(htmltools)
library(htmlwidgets)
# https://rstudio.github.io/leaflet/markers.html
# DATA IMPORT
bib <- ReadBib(file = "../data/biblio.bib")
bib <- as.data.frame(bib)
bib$id <- row.names(bib)
bib$author <- sub("\\}", "", bib$author)
bib$author <- sub("\\{", "", bib$author)
q <- read.csv("../data/quotes.csv", stringsAsFactors=FALSE)
loc <- read.csv("../data/authors.csv", stringsAsFactors=FALSE)
quotes <- merge(x = q, y = bib, by.x = "book", by.y = "id", all.y=T)
quotes <- merge(x = quotes, y = loc, by.x = "author", by.y = "author", all.y=T)
words <- read.csv("../data/words.csv", stringsAsFactors=FALSE)
words <- words$words
# POPUP FORMATING
col <- "#fce303"
for (i in 1:length(words)){
quotes$quote <- sub(paste0(" ",words[i]," "), paste0(" <span style='background:",col,"'>",words[i],"</span> </u>"), quotes$quote)
quotes$quote <- sub(paste0(" ",words[i],"\\,"), paste0(" <span style='background:",col,"'>",words[i],"</span>,</u>"), quotes$quote)
quotes$quote <- sub(paste0(" ",words[i],"\\."), paste0(" <span style='background:",col,"'>",words[i],"</span>.</u>"), quotes$quote)
}
quotes$labelhtml <- paste0(
"<div width='300px' align='center'>",
"<h2>",
"« ",quotes$quote," »",
"</h2>",
"<b>",quotes$author,"</b> ",quotes$location,".<br/>",
"<i>",quotes$title,"</i>. ",quotes$publisher,", ",quotes$year,".",
"</div>"
)
# TITLE
title <- tags$div(includeCSS("../css/maptitle.css"), HTML("<i>MapQuote</i>"))
source <- tags$div(includeCSS("../css/mapnote.css"), HTML(paste0("Carte conçue par <b>Nicolas Lambert</b> & <b>Françoise Bahoken</b>. Mise à jour : ",Sys.Date(), " (",dim(bib)[1]," livres et ", dim(quotes)[1]," citations)" )))
contrib <- tags$div(includeCSS("../css/contrib.css"), HTML("<a href='form.html' target='_blank'><img src='img/contribuez.svg'></img></a>"))
# PIN
pins <- makeIcon(
iconUrl = "../img/pin.svg",
iconWidth = 30, iconHeight = 30,
iconAnchorX = 15, iconAnchorY = 15
)
m <- leaflet(quotes) %>%
addProviderTiles(providers$Esri.WorldImagery) %>%
addMarkers(~lng, ~lat, popup = ~labelhtml, clusterOptions = markerClusterOptions(), icon = pins ) %>%
addScaleBar(position = "bottomleft") %>%
addControl(title, className="map-title") %>%
addControl(source, className="map-note") %>%
addControl(contrib, className="map-contrib")
m
install.packages("blogdown")
dmm <- read.csv("data/MissingMigrants-Global-2019-10-07T15-08-09.csv", stringsAsFactors = F)
getwd()
library("sf")
library("rnaturalearth")
library("cartogram")
library("cartography")
# Geometries
prj <- 3035
bb <- st_bbox(c(xmin = 2582479, xmax = 7467761, ymin = 630907.1, ymax = 2802422), crs = prj)
# Data
iom <- read.csv("data/MissingMigrants-Global-2019-10-07T15-08-09.csv", stringsAsFactors = F)
iom <- iom[(iom$Location.Coordinates)!="",]
latlon <- matrix(as.numeric(unlist(strsplit(iom$Location.Coordinates, split = ", "))), ncol = 2, byrow = T)
colnames(latlon) <- c("lat", 'lon')
iom <- cbind(iom, latlon)
iom <- iom[,c("Web.ID","Reported.Year","Total.Dead.and.Missing","Number.of.Survivors","Region.of.Incident","lat","lon")]
colnames(iom) <- c("id","year","deads","survivors","region","latitude","longitude")
iom$deads <- as.numeric(iom$deads)
iom <- iom[!is.na(iom$deads),]
om$latitude <- as.numeric(iom$latitude)
iom$longitude <- as.numeric(iom$longitude)
iom_sf <- st_as_sf(iom, coords = c("longitude", "latitude"), crs = 4326, agr = "constant")
iom_sf <- st_transform(iom_sf,crs = prj)
iom_sf <- iom_sf[iom_sf$region =="Mediterranean",]
iom_sf <- iom_sf[,c("geometry","deads")]
install.packages(c("backports", "bookdown", "callr", "cartography", "curl", "data.table", "devtools", "digest", "DT", "ellipsis", "emld", "eurostat", "htmltools", "htmlwidgets", "httpuv", "hutils", "knitr", "later", "maptools", "pkgbuild", "pkgconfig", "proj4", "promises", "protolite", "raster", "rgeos", "RJSONIO", "rmarkdown", "sf", "shiny", "spatstat", "spData", "tanaka", "testit", "tidyr", "tinytex", "units", "xaringan", "xfun"))
# --------------------------------- #
#               DEAD                #
#           AND MISSING             #
#             MIGRANTS              #
# --------------------------------- #
setwd("/home/nlambert/Documents/R/mexusaborder/R")
library("sf")
library("rnaturalearth")
library("geojsonsf")
library("cartography")
library("cartogram")
library("SpatialPosition")
iom <- read.csv("../data/iom/MissingMigrants-Global-2019-09-04T11-59-55.csv", stringsAsFactors = F)
iom <- iom[(iom$Location.Coordinates)!="",]
latlon <- matrix(as.numeric(unlist(strsplit(iom$Location.Coordinates, split = ", "))), ncol = 2, byrow = T)
colnames(latlon) <- c("lat", 'lon')
iom <- cbind(iom, latlon)
iom <- iom[,c("Web.ID","Reported.Year","Total.Dead.and.Missing","Number.of.Survivors","Region.of.Incident","lat","lon")]
colnames(iom) <- c("id","year","deads","survivors","region","latitude","longitude")
iom$deads <- as.numeric(iom$deads)
iom <- iom[!is.na(iom$deads),]
iom$latitude <- as.numeric(iom$latitude)
iom$longitude <- as.numeric(iom$longitude)
iom_sf <- st_as_sf(iom, coords = c("longitude", "latitude"), crs = 4326, agr = "constant")
iom_sf <- st_transform(iom_sf,crs = prj)
st_bbox(iom_sf)[c(2,4)]
st_bbox(iom_sf)[c(1,3)]
extent <- c(-16177797, -4380941, 16133419, 10095697 )
extent[c(2,4)]
st_bbox(iom_sf)[c(2,4)]
extent[c(1,3)]
st_bbox(iom_sf)[c(2,4)]
st_bbox(iom_sf)[c(1,3)]
iom <- read.csv("../data/iom/MissingMigrants-Global-2019-09-04T11-59-55.csv", stringsAsFactors = F)
iom <- iom[(iom$Location.Coordinates)!="",]
latlon <- matrix(as.numeric(unlist(strsplit(iom$Location.Coordinates, split = ", "))), ncol = 2, byrow = T)
colnames(latlon) <- c("lat", 'lon')
iom <- cbind(iom, latlon)
iom <- iom[,c("Web.ID","Reported.Year","Total.Dead.and.Missing","Number.of.Survivors","Region.of.Incident","lat","lon")]
colnames(iom) <- c("id","year","deads","survivors","region","latitude","longitude")
iom$deads <- as.numeric(iom$deads)
iom <- iom[!is.na(iom$deads),]
iom$latitude <- as.numeric(iom$latitude)
iom$longitude <- as.numeric(iom$longitude)
iom_sf <- st_as_sf(iom, coords = c("longitude", "latitude"), crs = 4326, agr = "constant")
iom_sf <- st_transform(iom_sf,crs = prj)
st_bbox(iom_sf)
st_bbox(iom_sf)[c(2,4)]
st_bbox(bboxocean)[c(1,3)]
region
iom_sf <- iom_sf[iom_sf$region =="US-Mexico Border",]
bbox(iom_sf)
st_bbox(iom_sf)
# Data import and shaping
iom <- read.csv("data/iom/MissingMigrants-Global-2019-09-04T11-59-55.csv", stringsAsFactors = F)
iom <- iom[(iom$Location.Coordinates)!="",]
iom <- iom[iom$Region.of.Incident =="US-Mexico Border",]
latlon <- matrix(as.numeric(unlist(strsplit(iom$Location.Coordinates, split = ", "))), ncol = 2, byrow = T)
colnames(latlon) <- c("lat", 'lon')
iom <- cbind(iom, latlon)
iom <- iom[,c("Reported.Year","Total.Dead.and.Missing","lat","lon","Location.Description","Cause.of.Death","Information.Source")]
colnames(iom) <- c("year","deads","lat","lon","location","cause","source")
fences <- geojson_sf("../data/data.world/border-fence.geojson")
